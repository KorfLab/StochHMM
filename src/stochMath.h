//
//  stochMath.h

//Copyright (c) 2007-2012 Paul C Lott 
//University of California, Davis
//Genome and Biomedical Sciences Facility
//UC Davis Genome Center
//Ian Korf Lab
//Website: www.korflab.ucdavis.edu
//Email: lottpaul@gmail.com
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of
//this software and associated documentation files (the "Software"), to deal in
//the Software without restriction, including without limitation the rights to
//use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
//the Software, and to permit persons to whom the Software is furnished to do so,
//subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#ifndef STOCHMATH_H
#define STOCHMATH_H

#include <math.h>
#include <iostream>
#include <vector>
#include <limits>
#include <stdint.h>
#include <algorithm>

#ifndef SIZE_MAX
#define SIZE_MAX ((size_t)-1)
#endif

#ifndef UINT16_MAX
#define UINT16_MAX 65535
#endif


namespace StochHMM{
    
    #define PI 3.1415926535897932
    
    //FIXME: Need to generate dynamically once upon initialization of HMM. System differences between (int,long,...);
    //Or just leave it. It may work well enough;
    
#if __LP64__
    const uint64_t POWER[32][128] = {
        {},
        {1ULL, 2ULL, 3ULL, 4ULL, 5ULL, 6ULL, 7ULL, 8ULL, 9ULL, 10ULL, 11ULL, 12ULL, 13ULL, 14ULL, 15ULL, 16ULL, 17ULL, 18ULL, 19ULL, 20ULL, 21ULL, 22ULL, 23ULL, 24ULL, 25ULL, 26ULL, 27ULL, 28ULL, 29ULL, 30ULL, 31ULL, 32ULL, 33ULL, 34ULL, 35ULL, 36ULL, 37ULL, 38ULL, 39ULL, 40ULL, 41ULL, 42ULL, 43ULL, 44ULL, 45ULL, 46ULL, 47ULL, 48ULL, 49ULL, 50ULL, 51ULL, 52ULL, 53ULL, 54ULL, 55ULL, 56ULL, 57ULL, 58ULL, 59ULL, 60ULL, 61ULL, 62ULL, 63ULL, 64ULL, 65ULL, 66ULL, 67ULL, 68ULL, 69ULL, 70ULL, 71ULL, 72ULL, 73ULL, 74ULL, 75ULL, 76ULL, 77ULL, 78ULL, 79ULL, 80ULL, 81ULL, 82ULL, 83ULL, 84ULL, 85ULL, 86ULL, 87ULL, 88ULL, 89ULL, 90ULL, 91ULL, 92ULL, 93ULL, 94ULL, 95ULL, 96ULL, 97ULL, 98ULL, 99ULL, 100ULL, 101ULL, 102ULL, 103ULL, 104ULL, 105ULL, 106ULL, 107ULL, 108ULL, 109ULL, 110ULL, 111ULL, 112ULL, 113ULL, 114ULL, 115ULL, 116ULL, 117ULL, 118ULL, 119ULL, 120ULL, 121ULL, 122ULL, 123ULL, 124ULL, 125ULL, 126ULL, 127ULL, 128ULL},
        {1ULL, 4ULL, 9ULL, 16ULL, 25ULL, 36ULL, 49ULL, 64ULL, 81ULL, 100ULL, 121ULL, 144ULL, 169ULL, 196ULL, 225ULL, 256ULL, 289ULL, 324ULL, 361ULL, 400ULL, 441ULL, 484ULL, 529ULL, 576ULL, 625ULL, 676ULL, 729ULL, 784ULL, 841ULL, 900ULL, 961ULL, 1024ULL, 1089ULL, 1156ULL, 1225ULL, 1296ULL, 1369ULL, 1444ULL, 1521ULL, 1600ULL, 1681ULL, 1764ULL, 1849ULL, 1936ULL, 2025ULL, 2116ULL, 2209ULL, 2304ULL, 2401ULL, 2500ULL, 2601ULL, 2704ULL, 2809ULL, 2916ULL, 3025ULL, 3136ULL, 3249ULL, 3364ULL, 3481ULL, 3600ULL, 3721ULL, 3844ULL, 3969ULL, 4096ULL, 4225ULL, 4356ULL, 4489ULL, 4624ULL, 4761ULL, 4900ULL, 5041ULL, 5184ULL, 5329ULL, 5476ULL, 5625ULL, 5776ULL, 5929ULL, 6084ULL, 6241ULL, 6400ULL, 6561ULL, 6724ULL, 6889ULL, 7056ULL, 7225ULL, 7396ULL, 7569ULL, 7744ULL, 7921ULL, 8100ULL, 8281ULL, 8464ULL, 8649ULL, 8836ULL, 9025ULL, 9216ULL, 9409ULL, 9604ULL, 9801ULL, 10000ULL, 10201ULL, 10404ULL, 10609ULL, 10816ULL, 11025ULL, 11236ULL, 11449ULL, 11664ULL, 11881ULL, 12100ULL, 12321ULL, 12544ULL, 12769ULL, 12996ULL, 13225ULL, 13456ULL, 13689ULL, 13924ULL, 14161ULL, 14400ULL, 14641ULL, 14884ULL, 15129ULL, 15376ULL, 15625ULL, 15876ULL, 16129ULL, 16384ULL},
        {},
        {},
        {},
        {1ULL, 64ULL, 729ULL, 4096ULL, 15625ULL, 46656ULL, 117649ULL, 262144ULL, 531441ULL, 1000000ULL, 1771561ULL, 2985984ULL, 4826809ULL, 7529536ULL, 11390625ULL, 16777216ULL, 24137569ULL, 34012224ULL, 47045881ULL, 64000000ULL, 85766121ULL, 113379904ULL, 148035889ULL, 191102976ULL, 244140625ULL, 308915776ULL, 387420489ULL, 481890304ULL, 594823321ULL, 729000000ULL, 887503681ULL, 1073741824ULL, 1291467969ULL, 1544804416ULL, 1838265625ULL, 2176782336ULL, 2565726409ULL, 3010936384ULL, 3518743761ULL, 4096000000ULL, 4750104241ULL, 5489031744ULL, 6321363049ULL, 7256313856ULL, 8303765625ULL, 9474296896ULL, 10779215329ULL, 12230590464ULL, 13841287201ULL, 15625000000ULL, 17596287801ULL, 19770609664ULL, 22164361129ULL, 24794911296ULL, 27680640625ULL, 30840979456ULL, 34296447249ULL, 38068692544ULL, 42180533641ULL, 46656000000ULL, 51520374361ULL, 56800235584ULL, 62523502209ULL, 68719476736ULL, 75418890625ULL, 82653950016ULL, 90458382169ULL, 98867482624ULL, 107918163081ULL, 117649000000ULL, 128100283921ULL, 139314069504ULL, 151334226289ULL, 164206490176ULL, 177978515625ULL, 192699928576ULL, 208422380089ULL, 225199600704ULL, 243087455521ULL, 262144000000ULL, 282429536481ULL, 304006671424ULL, 326940373369ULL, 351298031616ULL, 377149515625ULL, 404567235136ULL, 433626201009ULL, 464404086784ULL, 496981290961ULL, 531441000000ULL, 567869252041ULL, 606355001344ULL, 646990183449ULL, 689869781056ULL, 735091890625ULL, 782757789696ULL, 832972004929ULL, 885842380864ULL, 941480149401ULL, 1000000000000ULL, 1061520150601ULL, 1126162419264ULL, 1194052296529ULL, 1265319018496ULL, 1340095640625ULL, 1418519112256ULL, 1500730351849ULL, 1586874322944ULL, 1677100110841ULL, 1771561000000ULL, 1870414552161ULL, 1973822685184ULL, 2081951752609ULL, 2194972623936ULL, 2313060765625ULL, 2436396322816ULL, 2565164201769ULL, 2699554153024ULL, 2839760855281ULL, 2985984000000ULL, 3138428376721ULL, 3297303959104ULL, 3462825991689ULL, 3635215077376ULL, 3814697265625ULL, 4001504141376ULL, 4195872914689ULL, 4398046511104ULL},
        {},
        {1ULL, 256ULL, 6561ULL, 65536ULL, 390625ULL, 1679616ULL, 5764801ULL, 16777216ULL, 43046721ULL, 100000000ULL, 214358881ULL, 429981696ULL, 815730721ULL, 1475789056ULL, 2562890625ULL, 4294967296ULL, 6975757441ULL, 11019960576ULL, 16983563041ULL, 25600000000ULL, 37822859361ULL, 54875873536ULL, 78310985281ULL, 110075314176ULL, 152587890625ULL, 208827064576ULL, 282429536481ULL, 377801998336ULL, 500246412961ULL, 656100000000ULL, 852891037441ULL, 1099511627776ULL, 1406408618241ULL, 1785793904896ULL, 2251875390625ULL, 2821109907456ULL, 3512479453921ULL, 4347792138496ULL, 5352009260481ULL, 6553600000000ULL, 7984925229121ULL, 9682651996416ULL, 11688200277601ULL, 14048223625216ULL, 16815125390625ULL, 20047612231936ULL, 23811286661761ULL, 28179280429056ULL, 33232930569601ULL, 39062500000000ULL, 45767944570401ULL, 53459728531456ULL, 62259690411361ULL, 72301961339136ULL, 83733937890625ULL, 96717311574016ULL, 111429157112001ULL, 128063081718016ULL, 146830437604321ULL, 167961600000000ULL, 191707312997281ULL, 218340105584896ULL, 248155780267521ULL, 281474976710656ULL, 318644812890625ULL, 360040606269696ULL, 406067677556641ULL, 457163239653376ULL, 513798374428641ULL, 576480100000000ULL, 645753531245761ULL, 722204136308736ULL, 806460091894081ULL, 899194740203776ULL, 1001129150390625ULL, 1113034787454976ULL, 1235736291547681ULL, 1370114370683136ULL, 1517108809906561ULL, 1677721600000000ULL, 1853020188851841ULL, 2044140858654976ULL, 2252292232139041ULL, 2478758911082496ULL, 2724905250390625ULL, 2992179271065856ULL, 3282116715437121ULL, 3596345248055296ULL, 3936588805702081ULL, 4304672100000000ULL, 4702525276151521ULL, 5132188731375616ULL, 5595818096650401ULL, 6095689385410816ULL, 6634204312890625ULL, 7213895789838336ULL, 7837433594376961ULL, 8507630225817856ULL, 9227446944279201ULL, 10000000000000000ULL, 10828567056280801ULL, 11716593810022656ULL, 12667700813876161ULL, 13685690504052736ULL, 14774554437890625ULL, 15938480745308416ULL, 17181861798319201ULL, 18509302102818816ULL, 19925626416901921ULL, 21435888100000000ULL, 23045377697175681ULL, 24759631762948096ULL, 26584441929064321ULL, 28525864220672256ULL, 30590228625390625ULL, 32784148919812096ULL, 35114532758015841ULL, 37588592026706176ULL, 40213853471634241ULL, 42998169600000000ULL, 45949729863572161ULL, 49077072127303936ULL, 52389094428262881ULL, 55895067029733376ULL, 59604644775390625ULL, 63527879748485376ULL, 67675234241018881ULL, 72057594037927936ULL},
        {},
        {},
        {},
        {},
        {1ULL, 8192ULL, 1594323ULL, 67108864ULL, 1220703125ULL, 13060694016ULL, 96889010407ULL, 549755813888ULL, 2541865828329ULL, 10000000000000ULL, 34522712143931ULL, 106993205379072ULL, 302875106592253ULL, 793714773254144ULL, 1946195068359375ULL, 4503599627370496ULL, 9904578032905937ULL, 20822964865671168ULL, 42052983462257059ULL, 81920000000000000ULL, 154472377739119461ULL, 282810057883082752ULL, 504036361936467383ULL, 876488338465357824ULL, 1490116119384765625ULL, 2481152873203736576ULL, 4052555153018976267ULL, 6502111422497947648ULL, 10260628712958602189ULL, 15943230000000000000ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 16384ULL, 4782969ULL, 268435456ULL, 6103515625ULL, 78364164096ULL, 678223072849ULL, 4398046511104ULL, 22876792454961ULL, 100000000000000ULL, 379749833583241ULL, 1283918464548864ULL, 3937376385699289ULL, 11112006825558016ULL, 29192926025390625ULL, 72057594037927936ULL, 168377826559400929ULL, 374813367582081024ULL, 799006685782884121ULL, 1638400000000000000ULL, 3243919932521508681ULL, 6221821273427820544ULL, 11592836324538749809ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 32768ULL, 14348907ULL, 1073741824ULL, 30517578125ULL, 470184984576ULL, 4747561509943ULL, 35184372088832ULL, 205891132094649ULL, 1000000000000000ULL, 4177248169415651ULL, 15407021574586368ULL, 51185893014090757ULL, 155568095557812224ULL, 437893890380859375ULL, 1152921504606846976ULL, 2862423051509815793ULL, 6746640616477458432ULL, 15181127029874798299ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 65536ULL, 43046721ULL, 4294967296ULL, 152587890625ULL, 2821109907456ULL, 33232930569601ULL, 281474976710656ULL, 1853020188851841ULL, 10000000000000000ULL, 45949729863572161ULL, 184884258895036416ULL, 665416609183179841ULL, 2177953337809371136ULL, 6568408355712890625ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 131072ULL, 129140163ULL, 17179869184ULL, 762939453125ULL, 16926659444736ULL, 232630513987207ULL, 2251799813685248ULL, 16677181699666569ULL, 100000000000000000ULL, 505447028499293771ULL, 2218611106740436992ULL, 8650415919381337933ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 262144ULL, 387420489ULL, 68719476736ULL, 3814697265625ULL, 101559956668416ULL, 1628413597910449ULL, 18014398509481984ULL, 150094635296999121ULL, 1000000000000000000ULL, 5559917313492231481ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 524288ULL, 1162261467ULL, 274877906944ULL, 19073486328125ULL, 609359740010496ULL, 11398895185373143ULL, 144115188075855872ULL, 1350851717672992089ULL, 10000000000000000000ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 1048576ULL, 3486784401ULL, 1099511627776ULL, 95367431640625ULL, 3656158440062976ULL, 79792266297612001ULL, 1152921504606846976ULL, 12157665459056928801ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 2097152ULL, 10460353203ULL, 4398046511104ULL, 476837158203125ULL, 21936950640377856ULL, 558545864083284007ULL, 9223372036854775808ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 4194304ULL, 31381059609ULL, 17592186044416ULL, 2384185791015625ULL, 131621703842267136ULL, 3909821048582988049ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 8388608ULL, 94143178827ULL, 70368744177664ULL, 11920928955078125ULL, 789730223053602816ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 16777216ULL, 282429536481ULL, 281474976710656ULL, 59604644775390625ULL, 4738381338321616896ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 33554432ULL, 847288609443ULL, 1125899906842624ULL, 298023223876953125ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 67108864ULL, 2541865828329ULL, 4503599627370496ULL, 1490116119384765625ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 134217728ULL, 7625597484987ULL, 18014398509481984ULL, 7450580596923828125ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 268435456ULL, 22876792454961ULL, 72057594037927936ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 536870912ULL, 68630377364883ULL, 288230376151711744ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 1073741824ULL, 205891132094649ULL, 1152921504606846976ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL},
        {1ULL, 2147483648ULL, 617673396283947ULL, 4611686018427387904ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL, 0ULL}
    };
#else
    
    const uint32_t POWER[32][128] = {
        {1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL},
        {1UL, 2UL, 3UL, 4UL, 5UL, 6UL, 7UL, 8UL, 9UL, 10UL, 11UL, 12UL, 13UL, 14UL, 15UL, 16UL, 17UL, 18UL, 19UL, 20UL, 21UL, 22UL, 23UL, 24UL, 25UL, 26UL, 27UL, 28UL, 29UL, 30UL, 31UL, 32UL, 33UL, 34UL, 35UL, 36UL, 37UL, 38UL, 39UL, 40UL, 41UL, 42UL, 43UL, 44UL, 45UL, 46UL, 47UL, 48UL, 49UL, 50UL, 51UL, 52UL, 53UL, 54UL, 55UL, 56UL, 57UL, 58UL, 59UL, 60UL, 61UL, 62UL, 63UL, 64UL, 65UL, 66UL, 67UL, 68UL, 69UL, 70UL, 71UL, 72UL, 73UL, 74UL, 75UL, 76UL, 77UL, 78UL, 79UL, 80UL, 81UL, 82UL, 83UL, 84UL, 85UL, 86UL, 87UL, 88UL, 89UL, 90UL, 91UL, 92UL, 93UL, 94UL, 95UL, 96UL, 97UL, 98UL, 99UL, 100UL, 101UL, 102UL, 103UL, 104UL, 105UL, 106UL, 107UL, 108UL, 109UL, 110UL, 111UL, 112UL, 113UL, 114UL, 115UL, 116UL, 117UL, 118UL, 119UL, 120UL, 121UL, 122UL, 123UL, 124UL, 125UL, 126UL, 127UL, 128UL},
        {1UL, 4UL, 9UL, 16UL, 25UL, 36UL, 49UL, 64UL, 81UL, 100UL, 121UL, 144UL, 169UL, 196UL, 225UL, 256UL, 289UL, 324UL, 361UL, 400UL, 441UL, 484UL, 529UL, 576UL, 625UL, 676UL, 729UL, 784UL, 841UL, 900UL, 961UL, 1024UL, 1089UL, 1156UL, 1225UL, 1296UL, 1369UL, 1444UL, 1521UL, 1600UL, 1681UL, 1764UL, 1849UL, 1936UL, 2025UL, 2116UL, 2209UL, 2304UL, 2401UL, 2500UL, 2601UL, 2704UL, 2809UL, 2916UL, 3025UL, 3136UL, 3249UL, 3364UL, 3481UL, 3600UL, 3721UL, 3844UL, 3969UL, 4096UL, 4225UL, 4356UL, 4489UL, 4624UL, 4761UL, 4900UL, 5041UL, 5184UL, 5329UL, 5476UL, 5625UL, 5776UL, 5929UL, 6084UL, 6241UL, 6400UL, 6561UL, 6724UL, 6889UL, 7056UL, 7225UL, 7396UL, 7569UL, 7744UL, 7921UL, 8100UL, 8281UL, 8464UL, 8649UL, 8836UL, 9025UL, 9216UL, 9409UL, 9604UL, 9801UL, 10000UL, 10201UL, 10404UL, 10609UL, 10816UL, 11025UL, 11236UL, 11449UL, 11664UL, 11881UL, 12100UL, 12321UL, 12544UL, 12769UL, 12996UL, 13225UL, 13456UL, 13689UL, 13924UL, 14161UL, 14400UL, 14641UL, 14884UL, 15129UL, 15376UL, 15625UL, 15876UL, 16129UL, 16384UL},
        {1UL, 8UL, 27UL, 64UL, 125UL, 216UL, 343UL, 512UL, 729UL, 1000UL, 1331UL, 1728UL, 2197UL, 2744UL, 3375UL, 4096UL, 4913UL, 5832UL, 6859UL, 8000UL, 9261UL, 10648UL, 12167UL, 13824UL, 15625UL, 17576UL, 19683UL, 21952UL, 24389UL, 27000UL, 29791UL, 32768UL, 35937UL, 39304UL, 42875UL, 46656UL, 50653UL, 54872UL, 59319UL, 64000UL, 68921UL, 74088UL, 79507UL, 85184UL, 91125UL, 97336UL, 103823UL, 110592UL, 117649UL, 125000UL, 132651UL, 140608UL, 148877UL, 157464UL, 166375UL, 175616UL, 185193UL, 195112UL, 205379UL, 216000UL, 226981UL, 238328UL, 250047UL, 262144UL, 274625UL, 287496UL, 300763UL, 314432UL, 328509UL, 343000UL, 357911UL, 373248UL, 389017UL, 405224UL, 421875UL, 438976UL, 456533UL, 474552UL, 493039UL, 512000UL, 531441UL, 551368UL, 571787UL, 592704UL, 614125UL, 636056UL, 658503UL, 681472UL, 704969UL, 729000UL, 753571UL, 778688UL, 804357UL, 830584UL, 857375UL, 884736UL, 912673UL, 941192UL, 970299UL, 1000000UL, 1030301UL, 1061208UL, 1092727UL, 1124864UL, 1157625UL, 1191016UL, 1225043UL, 1259712UL, 1295029UL, 1331000UL, 1367631UL, 1404928UL, 1442897UL, 1481544UL, 1520875UL, 1560896UL, 1601613UL, 1643032UL, 1685159UL, 1728000UL, 1771561UL, 1815848UL, 1860867UL, 1906624UL, 1953125UL, 2000376UL, 2048383UL, 2097152UL},
        {1UL, 16UL, 81UL, 256UL, 625UL, 1296UL, 2401UL, 4096UL, 6561UL, 10000UL, 14641UL, 20736UL, 28561UL, 38416UL, 50625UL, 65536UL, 83521UL, 104976UL, 130321UL, 160000UL, 194481UL, 234256UL, 279841UL, 331776UL, 390625UL, 456976UL, 531441UL, 614656UL, 707281UL, 810000UL, 923521UL, 1048576UL, 1185921UL, 1336336UL, 1500625UL, 1679616UL, 1874161UL, 2085136UL, 2313441UL, 2560000UL, 2825761UL, 3111696UL, 3418801UL, 3748096UL, 4100625UL, 4477456UL, 4879681UL, 5308416UL, 5764801UL, 6250000UL, 6765201UL, 7311616UL, 7890481UL, 8503056UL, 9150625UL, 9834496UL, 10556001UL, 11316496UL, 12117361UL, 12960000UL, 13845841UL, 14776336UL, 15752961UL, 16777216UL, 17850625UL, 18974736UL, 20151121UL, 21381376UL, 22667121UL, 24010000UL, 25411681UL, 26873856UL, 28398241UL, 29986576UL, 31640625UL, 33362176UL, 35153041UL, 37015056UL, 38950081UL, 40960000UL, 43046721UL, 45212176UL, 47458321UL, 49787136UL, 52200625UL, 54700816UL, 57289761UL, 59969536UL, 62742241UL, 65610000UL, 68574961UL, 71639296UL, 74805201UL, 78074896UL, 81450625UL, 84934656UL, 88529281UL, 92236816UL, 96059601UL, 100000000UL, 104060401UL, 108243216UL, 112550881UL, 116985856UL, 121550625UL, 126247696UL, 131079601UL, 136048896UL, 141158161UL, 146410000UL, 151807041UL, 157351936UL, 163047361UL, 168896016UL, 174900625UL, 181063936UL, 187388721UL, 193877776UL, 200533921UL, 207360000UL, 214358881UL, 221533456UL, 228886641UL, 236421376UL, 244140625UL, 252047376UL, 260144641UL, 268435456UL},
        {1UL, 32UL, 243UL, 1024UL, 3125UL, 7776UL, 16807UL, 32768UL, 59049UL, 100000UL, 161051UL, 248832UL, 371293UL, 537824UL, 759375UL, 1048576UL, 1419857UL, 1889568UL, 2476099UL, 3200000UL, 4084101UL, 5153632UL, 6436343UL, 7962624UL, 9765625UL, 11881376UL, 14348907UL, 17210368UL, 20511149UL, 24300000UL, 28629151UL, 33554432UL, 39135393UL, 45435424UL, 52521875UL, 60466176UL, 69343957UL, 79235168UL, 90224199UL, 102400000UL, 115856201UL, 130691232UL, 147008443UL, 164916224UL, 184528125UL, 205962976UL, 229345007UL, 254803968UL, 282475249UL, 312500000UL, 345025251UL, 380204032UL, 418195493UL, 459165024UL, 503284375UL, 550731776UL, 601692057UL, 656356768UL, 714924299UL, 777600000UL, 844596301UL, 916132832UL, 992436543UL, 1073741824UL, 1160290625UL, 1252332576UL, 1350125107UL, 1453933568UL, 1564031349UL, 1680700000UL, 1804229351UL, 1934917632UL, 2073071593UL, 2219006624UL, 2373046875UL, 2535525376UL, 2706784157UL, 2887174368UL, 3077056399UL, 3276800000UL, 3486784401UL, 3707398432UL, 3939040643UL, 4182119424UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 64UL, 729UL, 4096UL, 15625UL, 46656UL, 117649UL, 262144UL, 531441UL, 1000000UL, 1771561UL, 2985984UL, 4826809UL, 7529536UL, 11390625UL, 16777216UL, 24137569UL, 34012224UL, 47045881UL, 64000000UL, 85766121UL, 113379904UL, 148035889UL, 191102976UL, 244140625UL, 308915776UL, 387420489UL, 481890304UL, 594823321UL, 729000000UL, 887503681UL, 1073741824UL, 1291467969UL, 1544804416UL, 1838265625UL, 2176782336UL, 2565726409UL, 3010936384UL, 3518743761UL, 4096000000UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 128UL, 2187UL, 16384UL, 78125UL, 279936UL, 823543UL, 2097152UL, 4782969UL, 10000000UL, 19487171UL, 35831808UL, 62748517UL, 105413504UL, 170859375UL, 268435456UL, 410338673UL, 612220032UL, 893871739UL, 1280000000UL, 1801088541UL, 2494357888UL, 3404825447UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 256UL, 6561UL, 65536UL, 390625UL, 1679616UL, 5764801UL, 16777216UL, 43046721UL, 100000000UL, 214358881UL, 429981696UL, 815730721UL, 1475789056UL, 2562890625UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 512UL, 19683UL, 262144UL, 1953125UL, 10077696UL, 40353607UL, 134217728UL, 387420489UL, 1000000000UL, 2357947691UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 1024UL, 59049UL, 1048576UL, 9765625UL, 60466176UL, 282475249UL, 1073741824UL, 3486784401UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 2048UL, 177147UL, 4194304UL, 48828125UL, 362797056UL, 1977326743UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 4096UL, 531441UL, 16777216UL, 244140625UL, 2176782336UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 8192UL, 1594323UL, 67108864UL, 1220703125UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 16384UL, 4782969UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 32768UL, 14348907UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 65536UL, 43046721UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 131072UL, 129140163UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 262144UL, 387420489UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 524288UL, 1162261467UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 1048576UL, 3486784401UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 2097152UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 4194304UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 8388608UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 16777216UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 33554432UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 67108864UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 134217728UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 268435456UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 536870912UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 1073741824UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
        {1UL, 2147483648UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL},
    };
#endif
    
    
    //! Integer Power function
    //! The function is overflow safe, all the calculations are checked to make sure that the result won't overflow.   Works for positive or negative bases.
    //! Any overflow will result in the return value of zero
    //! \param base
    //! \param exponent
    //! \return  zero if underflow or overflow occurs.
    template <typename T>
    T integerPower(T base, T exponent){
        bool negative(false);
        T max = std::numeric_limits<T>::max();
        if (base<1){    
            base=abs(base);
            if (exponent%2!=0){
                negative=true;
            }
        }
        
        T result = 1;
        while (exponent)
        {
            if (exponent & 1){
                if (result > max/base){  //Determine if value of result*base > INT_MAX;
                    return 0;
                }
                
                result *= base;
            }
            
            exponent >>= 1;
            
            if (exponent != 0){
                if (base > max/base){ //Determine if value of base*base > INT_MAX;
                    return 0;
                }
                base *= base;
            }
        }
        
        if (negative){
            return (-1*result);
        }
        return (result);
        
    };

    
    //! Takes two logd values and adds them together
    //! \param first  log'd Double value
    //! \param second log'd Double value
    //! \return Log'd sum of two values
	template<typename T>
    T addLog(T first, T second){
        if (first==-INFINITY){
            return second;
        }
        else if (second==-INFINITY){
            return first;
        }
        else if (first>second){
            return first+log(1+exp(second-first));
        }
        else{
            return second+log(1+exp(first-second));
        }
    }
    
	
    /*! \fn void addVectorCombinatorial(std::vector< REAL >& result, std::vector< REAL >& lhs, std::vector< REAL >& rhs)
     \brief Adds the lhs and rhs vector combinatorially in result
     \param lhs vector of (ints or doubles)
     \param rhs vector of (ints or doubles)
     \param results Result of the two vectors added together
	 
	 ----------------------------------------------------------------------------
	  Description: addVectorCombinatorial
	  Adds the values of vectors combinatorial
	  Example [ 1 4 ] + [ 2 7 ] = [ 2 6 8 11 ]
	 ----------------------------------------------------------------------------
	
     */
	template<typename T>
    void addVectorCombinatorial(std::vector<T>& result, std::vector<T>& lhs, std::vector<T>& rhs){
        
        if (result.size()>0){
            result.clear();
        }
        
        //If either vector is empty then return copy of the other
        if (lhs.size()==0){
            result.assign(rhs.begin(),rhs.end());
            return;
        }
        else if (rhs.size()==0){
            result.assign(lhs.begin(),lhs.end());
            return;
        }
        
        for(size_t i=0;i<lhs.size();i++){
            for(size_t j=0;j<rhs.size();j++){
                result.push_back(lhs[i]+rhs[j]);
            }
        }
        return;
    }
    
    
    /*! \fn void multiplyVectorCombinatorial(std::vector< REAL >& result, std::vector< REAL >& lhs, std::vector< REAL >& rhs)
     \brief Multiply teh lhs and rhs vector combinatorially in result
     \param lhs vector of (ints or doubles)
     \param rhs vector of (ints or doubles)
     \param results Result of the two vectors added together
     */
    template<typename T>
    void multiplyVectorCombinatorial(std::vector<T>& result, std::vector<T>& lhs, std::vector<T>& rhs){
        if (result.size()>0){
            result.clear();
        }
        
        //If either vector is empty then return copy of the other
        if (lhs.size()==0){
            result.assign(rhs.begin(),rhs.end());
            return;
        }
        else if (rhs.size()==0){
            result.assign(lhs.begin(),lhs.end());
            return;
        }
        
        
        for(size_t i=0;i<lhs.size();i++){
            for(size_t j=0;j<rhs.size();j++){
                result.push_back(lhs[i]*rhs[j]);
            }
        }
        return;
    }
    
    
    /*! \fn void addToVector(std::vector<REAL>& vec ,REAL value)
     \brief Adds value to each indices of the vector
     \param vec  Reference to vector 
     \param value  Value to add to vector
     */
    template<typename T>
	void addValueToVector(std::vector<T>& vec,T value){
        for(size_t i=0;i<vec.size();i++){
            vec[i]+=value;
        }
        return;
    }

    
    /*! \fn void multiplyValueToVector(std::vector<REAL>& vec, REAL value)
     \brief Multiply value to each indices of the vector
     \param vec Reference to vector
     \param value Value to multiply each indices by
     */
	template<typename T>
	void multiplyValueToVector(std::vector<T>& vec, T value){
        for(size_t i=0;i<vec.size();i++){
            vec[i]*=value;
        }
        return;
    }
    
    
    /*! \fn void divideValueToVector(std::vector<REAL>& vec, REAL value)
     \brief Divide value to each indices of the vector
     \param vec Reference to vector
     \param value Value to divide each indices by
     */
	template<typename T>
    void divideValueToVector(std::vector<T>& vec,T value){
        for(size_t i=0;i<vec.size();i++){
            vec[i]/=value;
        }
        return;
    }
	
    
    //  
    void generateUnknownIndices(std::vector<size_t>&,size_t,size_t,size_t);

    
    /*! \fn T sumVector(std::vector<T>& data)
     \brief Sum the vector and return the sum
     \param data Vector of doubles
     */
	template<class T>
    T sumVector(std::vector<T>& data){
        double sum=0;
        for(size_t i=0;i<data.size();i++){
            sum+=data[i];
        }
        return sum;
    }
	
	/*! \fn T sumVector(std::vector<T>& data)
     \brief Sum the vector and return the sum
     \param data Vector of doubles
     */
	template<class T>
    T sumVector(const std::vector<T>& data){
        double sum=0;
        for(size_t i=0;i<data.size();i++){
            sum+=data[i];
        }
        return sum;
    }
	
	/*! \fn T productVector(std::vector<T>& data)
     \brief Multiply terms in vector and return the product
     \param data Vector of T
     */
	template<class T>
    T productVector(std::vector<T>& data){
        double product=data[0];
        for(size_t i=1;i<data.size();++i){
            product*=data[i];
        }
        return product;
    }
	
    
    /*! \fn double minVector(std::vector<double>& data)
     \brief Get Minimum of the vector
     \param data Vector of doubles
     */
	template<typename T>
	T minVector(std::vector<T>& data){
        return *min_element(data.begin(), data.end());
    }
    
    /*! \fn double maxVector(std::vector<doubles>& data)
     \brief Get the Maximum of the vector
     \param data Vector of doubles
     */
	template<typename T>
    T maxVector(std::vector<T>& data){
        return *max_element(data.begin(), data.end());
    }
    
    /*! \fn T avgVector(std::vector<double>& data)
     \brief Get the average of the vector
     \param data Vector of doubles
     */
	template<typename T>
    T avgVector(std::vector<T>& data){
        return sumVector(data) / T(data.size());
    }
	
	    
    /*! \fn void logVector(std::vector<double>& data)
     \brief Take log of each element in vector
     \param data Vector of doubles
     */
	template<typename T>
    void logVector(std::vector<T>& data){
        for(size_t i=0;i<data.size();i++){
            data[i]=log(data[i]);
        }
        return;
    }
    
    /*! \fn void expVector(std::vector<doubles>& data)
     \brief Take the exponent of each element in the vector
     \param data Vector of doubles
     */
	template<typename T>
    void expVector(std::vector<T>& data){
        for(size_t i=0;i<data.size();i++){
            data[i]=exp(data[i]);
        }
        return;
    }
	
	/*! \fn T avgLogVector(std::vector<double>& data)
     \brief Get the average of the vector of log'd values
     \param data Vector of doubles
     */
	template<typename T>
    T avgLogVector(std::vector<T>& data){
		expVector(data);
        return log(sumVector(data) / T(data.size()));
    }

    
    /*! \fn void probVector(std::vector<double>& data)
     \brief Convert the vector to probilities.  Divide each indice by the sum of the vector
     \param data Vecor of doubles
     */
	template<typename T>
    void probVector(std::vector<T>& data){
        T sum=sumVector(data);
        for(size_t iter=0;iter<data.size();iter++){
            if (sum==0){
                data[iter]=0;
            }
            else{
                data[iter]/=sum;
            }
        }
        return;
    }
	
	template <typename T>
	void addVector(std::vector<T>& lhs, std::vector<T>& rhs){
		transform(lhs.begin(), lhs.end(), rhs.begin(), lhs.begin(), std::plus<T>());
		return;
	}
	
	/*! \fn void logProbVector(std::vector<double>& data)
     \brief Convert the vector to log of probilities.  Divide each indice by the sum of the vector
     \param data Vecor of doubles
     */
	template<typename T>
    void logProbVector(std::vector<T>& data){
        T sum=sumVector(data);
        for(size_t iter=0;iter<data.size();iter++){
            if (sum==0){
                data[iter]=-INFINITY;
            }
            else{
                data[iter] = log(data[iter]/sum);
            }
        }
        return;
    }
    
    
    //Linear interpolation and extrapolation
    /*! \fn double interpolate(std::pair<double,double>& a, std::pair<double,double>& b, double& cx)
     \brief  Interpolates the y value given cx and two surrounding points on either side a and b
     \param a pair of doubles (X1,Y1)
     \param b pair of doubles (X2,Y2)
     \param cx double value X
     */
    double interpolate(std::pair<double,double>&,std::pair<double,double>&,double&);
    
    
    /*! \fn double extrapolate(std::pair<double,double>& a, std::pair<double,double>& b, double& cx)
     \brief Extrapolates the Y value of point given by cx and two previous points.
     \param a  pair of doubles (X1,Y1)
     \param b  pair of doubles (X2,Y2)
     \param cx double value of X
     */
    double extrapolate(std::pair<double,double>&,std::pair<double,double>&,double&);
	
	
	template <class T>
	T min(std::vector<T> &set){
		T min =set[0];
		for(long i=set.size()-1;i>0;i--){
			if (set[i]<min){ min=set[i];}
		}
		return min;
    }
    
    template <class T>
	T max(std::vector<T> &set){
		T max=set[0];
		for(long i=set.size()-1;i>0;i--){
			if (set[i]>max){ max=set[i];}
		}
		return min;
    }
    
    template <class T>
	T construct_histogram (std::vector<T> &set,int N_bins){
		T mini=min(set);
		T maxi=max(set);
		T delta=(maxi-mini+1)/N_bins;
        std::vector<T> bin (N_bins,0);
		for(size_t i=set.size()-1;i != SIZE_MAX;i--){
			T value=floor((set[i]-mini)/delta);
			bin(value)=bin(value)+1/(set.size()*delta);
		}
		return bin;
    }
    
    template <class T>
	T smooth_histogram (std::vector<T> histo, int intervals, int window_size, int iterations){
        std::vector<T> s_histo=histo;
		for (int i=1;i<=iterations;i++){
			for (int b=0;b<=intervals-window_size;b++){
				int c=b+floor((window_size-1)/2);
				s_histo[c]=0;
				for (int j=b;j<=b+window_size-1;i++){
					s_histo[c]=s_histo[c]+histo[j]/window_size;
				}
			}
			for (int b=0;b<=((window_size-1)/2)-1;b++){
				s_histo=s_histo[floor((window_size-1)/2)];
			}
			for (int b=intervals-window_size+1+floor((window_size-1)/2); b<=intervals-1;i++){
				s_histo[b]=s_histo[intervals-window_size+floor((window_size-1) / 2)];
			}
			histo=s_histo;
		}
		T sum=0;
		for (int b=0;b<=intervals-1;b++){
			sum+=sum+s_histo[b];
		}
		for (int b=0;b<=intervals-1;b++){
			s_histo[b]/=sum;
		}
		return s_histo;
	}
	
    //!Shannon's Entropy in log(2) space
    float entropy(std::vector<float>& set);
	double entropy(std::vector<double>& set);
	
	//!Shannon's Relative entropy (Kullback-Leibler Divergence)
	//!Normalized for A->B and B->A
    float rel_entropy(std::vector<float> &set, std::vector<float> &set2);
	double rel_entropy(std::vector<double> &set, std::vector<double> &set2);
	
    double _integrate(double (*funct)(double, std::vector<double>&),double, double, std::vector<double>& );
    double integrate(double (*funct)(double, std::vector<double>&),double, double, std::vector<double>&, double, double);
    
    double simpson(double (*funct)(double, std::vector<double>&),double alpha, double beta,double lower, double upper);
    double adapt_simpson(double (*funct)(double, double, double),double alpha, double beta, double lower, double upper, double max_error, double sum);
    double summation(double(*funct)(int,std::vector<double>&), int, int, std::vector<double>&);
    
    ////Functions
    
    //Incomplete gamma functions
    double igamma_upper (double, double);
    double igamma_lower (double, double);
    double _igamma_lower (double, std::vector<double>&);
    //Regularized gamma functions
    double rgammap(double, double);
    double rgammaq(double, double);
    
    //Beta Functions
    double beta(double a, double b);
    
    //Incomplete Beta function
    double ibeta(double,double,double);
    float betaPDF(float x, float a, float b);
    double _ibeta(double, std::vector<double>&);
    
    //Regularized Incomplete Beta function
    double ribeta(double,double,double);
    
    double factorial(double);
    double bin_coef (double, double);
    int bin_coef(int,int);
    
    //!Logit function
	//!Inverse of the sigmoidal logistic function
	//!Also known as log-odds score or ratio
    inline double logit(double x){
        return log(x/(1-x));
    }

}
#endif
